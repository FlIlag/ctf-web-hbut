https://xz.aliyun.com/news/7001

ssrf的利用常见于内网，借助ssrf漏洞，利用dict协议爆破存活主机：
url=dict://178.1.1.0/24
然后再存活主机中尝试远程file协议读取本机文件和共享文件
再尝试能否找到存货主机中的redis漏洞
利用dict://协议远程访问6379执行redis命令，尝试未授权拿shell
利用Struts2，/action?action?:%25{3*4}，找到内网存在Struts2的设备
如果存活主机中存在有开启80端口的，尝试redis写马弹shell

又或者是借助fastcgi

ssrf绕过
利用10.0.0.1.xip.io来进行绕过，过程只需加上xip.io,http://xxx.192.168.0.1.xip.io/ == 192.168.0.1 (xxx 任意）
@符号绕过，可以利用该符号绕过限制内网ip
http://127.0.0.1
http://localhost
http://127.255.255.254
127.0.0.1 - 127.255.255.254
http://[::1]
http://[::ffff:7f00:1]
http://[::ffff:127.0.0.1]
http://127.1
http://127.0.1
http://0:80 



*服务器端请求伪造（SSRF）
**漏洞描述**：服务端请求伪造攻击（Server-side Request Forgery）：很多web应用都提供了从其他的服务器上获取数据的功能。使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。
这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器。这种形式的攻击称为服务端请求伪造攻击（Server-side Request Forgery）。
一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。
SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。攻击者利用ssrf可以实现的攻击主要有5种：
1. 可以对服务器所在内网、本地进行端口扫描，获取一些服务的banner信息；
2. 攻击运行在内网或本地的应用程序（比如溢出）； 
3. 对内网web应用进行指纹识别，通过访问默认文件实现； 
4. 攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）； 
5. 利用file协议读取本地文件等。 
**测试方法**：从WEB功能上寻找：我们从上面的概述可以看出，SSRF是由于服务端获取其他服务器的相关信息的功能中形成的，因此我们大可以列举几种在web应用中常见的从服务端获取其他服务器信息的的功能。
1. **通过分享功能**：通过URL地址分享网页内容：
早期分享应用中，为了更好的提供用户体验，WEB应用在分享功能中，通常会获取目标URL地址网页内容中的<title></title>标签
或者<meta name="description" content=" "/>标签中content的文本内容作为显示以提供更好的用户体验。例如人人网分享功能中：http://widget.renren.com/?resourceUrl=https://www.nsfocus.com 
通过目标URL地址获取了title标签和相关文本内容。而如果在此功能中没有对目标地址的范围做过滤与限制则就存在着SSRF漏洞.
2. **转码服务**：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览：由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，
把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务。 
3. **在线翻译**：通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道等。 
4. **图片加载与下载**：通过URL地址加载或下载图片：图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如在有些公司中的加载自家图片服务器上的图片用于展示。
（此处可能会有人有疑问，为什么加载图片服务器上的图片也会有问题，直接使用img标签不就好了？，没错是这样，但是开发者为了有更好的用户体验通常对图片做些微小调整例如加水印、压缩等，所以就可能造成SSRF问题）。 
5. **图片、文章收藏功能**：此处的图片、文章收藏中的文章收藏就类似于功能一、分享功能中获取URL地址中title以及文本的内容作为显示，目的还是为了更好的用户体验，而图片收藏就类似于功能四、图片加载。 
6. **未公开的api实现以及其他调用URL的功能**：此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容. 
**风险分析**：如果应用程序对用户提供的URL和远端服务器返回的信息没有进行合适的验证和过滤，则可能存在服务器端请求伪造攻击。 
