一般用bp测试

  Cookie、LocalStorage、SessionStorage中储存了明文密码或者其他加密密码或hash

http头泄露服务器版本信息

返回包暴露内网ip

对于登录次数限制，可以通过加入伪造ip尝试绕过，或者查看是否是前端限制，直接删除js代码绕过或者直接发包,或者更改cookie和seesion和csrf令牌

验证码穷举，验证码4-6位，且生效时间长

重要返回包可伪造，弱token设计：密码重置返回包时的验证返回包有效的参数token可预测，有明显规律，只有简单的md5或base64加密

session登录前后不变：漏洞描述：在用户进入登录页面，但还未登录时，就已经产生了一个 session，用户输入信息，登录以后，session 的 id 不会改变，也就是说没有建立新 session，
原来的 session 也没有被销毁）。攻击者事先访问系统并建立一个会话，诱使受害者使用此会话登录系统，然后攻击者再使用该会话访问系统即可登录受害者的账户。会话固定攻击的原理及流程如下图所示：
Bob（攻击者）
匿名访问www.buybook.com。
服务器与 Bob 建立了一个会话，比如 sessionid 为 1234567 。
Bob 构造了一个 URL：http://www.buybook.com/login.jsp?sessionid=1234567，发给了受害者 Alice。
Alice（受害者）
4. Alice 直接打开此链接，输入自己的用户名和密码登录系统。
5. 此时 Bob 再次访问http://www.buybook.com/viewprofile.jsp?sessionid=1234567，即可进入 Alice 的账户。


密码重置链接可预测：密码重置链接有一定规律，可人为预测，修改任意用户密码，比如：用户名加时间戳的md5值

密码任意重置：在对密码进行修改时，服务器可能会根据用户提交的用户账号参数来判断要修改哪个用户的密码，如果服务端没有对用户提交的数据进行严格校验，则可能引发任意用户密码修改漏洞。
(a) 方法一：
设置代理抓取修改密码过程数据包，在找回密码页面输入A账号，点击请求发送验证码。查看发送验证码数据包是否包含phone、email等参数，
如若存在，尝试修改为测试者的手机号码或者邮箱。(如果此步骤不存在phone、email等用户账号相关参数，参照方法二进行测试。)
查看短信或者邮箱是否收到验证码或者重置密码链接，使用收到的验证码或者访问重置密码链接，测试是否能进入密码重置页面。
如若进入密码重置页面，输入新密码测试是否能成功修改密码。
(b) 方法二：
设置代理抓取修改密码过程数据包，在找回密码页面输入A账号，点击请求发送短信验证码或者重置密码链接。
使用接收到的验证码或者重置密码链接进入密码修改页面，输入新密码提交并抓取数据包。查看数据包中是否存在用户账号相关参数，
如果存在，尝试将账号参数修改为其他用户的账号。 

短信 / 邮件验证码关联性验证缺失：输入用户名及使用手机号 A / 邮箱 A 获取验证码，修改为接收验证码的手机号 B / 邮箱 B 的号码，提交 B 收到的验证码到网站进行验证，
验证成功并进入手机号 / 邮箱 A 的功能页面，则说明存在漏洞。
手机号码 A / 邮箱 A 发送短信验证码的请求，在注册账户、修改密码等功能点将手机号码改为 B / 邮箱 B 的手机号码，测试是否可对手机号码 B / 邮箱 B 执行注册账户、修改密码等功能

负值反冲：漏洞描述：应用程序未校验订单数据的取值范围，交易存在负值反冲。测试方法：提交订单时拦截请求，修改订单参数为负数，如商品单价、数量、总价等。
风险分析：通过篡改订单参数，使得订单金额为负值，在使用余额支付时余额反而增加。

正负值对冲：漏洞描述：应用程序未校验订单数据的取值范围，交易存在正负值对冲。测试方法：提交订单（包含多种商品）时拦截请求，修改部分商品的单价或数量，保证订单总金额为正数。
风险分析：由于应用会校验订单总金额的取值范围，所以在保证该条件满足的前提下，修改个别商品的数量，达到正负值对冲。

改包跳过业务流程：一个业务（密码修改，商品买卖）有5个返回包，但用户通过调换其中的请求包实现绕过前几个步骤，跳过验证

 客户端校验绕过：漏洞描述：在重置密码中服务器对用户提交的验证码进行校验，如果校验成功则返回响应的特征值，如 1、true、success，
如果失败则对应返回 0、false、fail。但是如果根据服务端返回特征值来判断下一步是否能进入密码重置页面的校验动作由客户端完成的话则会被绕过，从而修改任意用户密码。

四舍五入测试
漏洞描述：如果存在提现和充值功能，通过对数值的四舍五入逻辑导致可以造成相应的漏洞。
测试方法：当目标系统最小显示金额为 0.00，那么尝试在充值的时候修改数据包为 0.001、0.005，查看账户的金额是否成功充值 0.01，如果是说明存在漏洞；
当目标系统最小显示金额为 0.00，那么尝试在提现的时候修改数据包为 0.001、0.005，查看账户的金额是否成功提现 0.01，如果是说明存在漏洞。
风险分析：攻击者通过篡改数据包中提现或充值结果，利用系统的四舍五入逻辑来达到少充多得的目的。

session覆盖
漏洞描述：在重置密码时，服务端可能会通过读取当前session会话来判断当前需要修改密码的账号，用户可能会通过覆盖session来对其它用户的密码进行修改。
测试方法：
1. 在修改密码页面输入A账号，点击发送验证码。
2. 输入收到的验证码，进入修改密码页面，先在此页面保持不动。 
3. 浏览器打开新标签页，访问修改密码页面，输入B账号，点击发送验证码。 
4. 返回第一个标签页（即A账号进入的修改密码标签页），输入新密码并提交。 
5. 尝试使用新密码登录B账号密码，如果能够成功登录B帐号，则说明存在session覆盖漏洞。 
**风险分析**：攻击者通过session覆盖可重置他人账户的密码。 










