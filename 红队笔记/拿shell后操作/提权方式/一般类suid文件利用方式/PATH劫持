利用前提：你可以更改环境变量，你发现的suid程序实际上执行了某个linux指令，eg:ps,cd ,ls
原理详解
    命令查找顺序
    当一个程序调用如ps,cd,pwd,ls 等不带！！！‘绝对路径’！！！的命令名（例如只写 "ps"、"tar"），该命令名依赖path环境变量

    环境变量可控性
    普通用户可以完全控制自己的 PATH，就可以修改Path，使自己构造的相同名称的环境变量替代之前的环境变量，子的构造的环境变量指向/bin/sh,以root权限打开一个shell

    SUID 程序的不安全调用
    如果一个 SUID 程序内调用外部工具时没有使用绝对路径（如 /bin/ps），就会被上述查找顺序劫持——以高权限执行你伪造的版本。
示例：
假设有一个简单的 SUID 程序 vuln_call_ps，它只是调用 ps aux 并打印结果：
1. 编写并安装带 SUID 的演示程序

/* vuln_call_ps.c */
#include <stdlib.h>
int main() {
    // 注意：这里故意不使用绝对路径，漏洞点在此
    system("ps aux");
    return 0;
}

编译为二进制文件，给予suid权限。

此时，无论哪个普通用户执行 ./vuln_call_ps，都会以 root 权限运行 system("ps aux")。
2. 构造劫持环境

    在当前目录创建一个名为 ps 的软链接，指向交互式 shell：

ln -s /bin/sh ps
chmod +x ps

 #命令解释：
ln -s /bin/sh ps
用于创建一个符号链接。ln 是用于创建链接的命令，-s 选项表明创建的是符号链接（软链接）。
/bin/sh 是系统中 shell 解释器的路径，ps 则是要创建的链接名。这意味着创建了一个名为 ps 的符号链接，它指向 /bin/sh。
简单来说，当执行 ps 这个命令时，实际上执行的是 /bin/sh。
使用示例：在当前目录下运行该命令后，会生成一个名为 ps 的文件，通过 ls -l 命令查看，会看到类似如下的输出：

lrwxrwxrwx 1 user user 7 May  8 15:30 ps -> /bin/sh

其中 l 表示这是一个符号链接，ps 指向 /bin/sh。
2. chmod +x ps
命令功能：chmod 是用于修改文件权限的命令，+x 表示给文件添加可执行权限，ps 是要修改权限的文件名。所以该命令的作用是让 ps 这个符号链接具备可执行权限。

将当前目录放到 PATH 最前面(让我们刚刚伪造的ps（实际上指向/bin/sh创建一个终端），从而替代掉之前的ps：

export PATH=$PWD:$PATH
运行时先去$PWD目录寻找是否有相同名称的文件和脚本而不去/bin,$PWD为你运行export PATH=$PWD:$PATH时的路径
用 PATH=$PWD:$PATH，你把那个目录固定地放在最前面——即使之后 cd 到别的地方，前面这一项仍然是最开始的目录。
或者：
export PATH=.:$PATH

    效果：当你运行一个不带绝对路径的命令（如 ps、ls、tar 等）时，Shell 会先在当前目录查找有没有同名可执行文件或脚本，如果找到就直接运行它，而不会去 /bin、usr/bin 等系统目录。

    在 SUID 利用中的意义：正是利用了这一点，你可以在当前目录放一个名为 ps（或其他目标程序名字）的恶意脚本/软链接，从而让具有 SUID 的程序误执行你放在 . 里的版本，以提权。

执行 SUID 程序：

$ ./vuln_call_ps
# id
uid=0(root) gid=0(root) groups=0(root)

由于 system("ps aux") 会调用 execvp("ps", ...)，而你的 PATH 让它先找到当前目录下的 ps（其实是 /bin/sh），就直接以 root 权限给你打开了一个 shell。


防御思路：

    强制使用绝对路径：在所有 system()/exec*() 调用中写明全路径，如 /bin/ps。

    审计 SUID 程序：查找所有带 SUID 的二进制，确认内部是否有不安全的命令调用。

    最小化 SUID：只保留必要的 SUID 程序，其它改用 sudo 或者能力控制（capabilities）。

    环境隔离：对关键程序清空或重置环境变量，如 PATH、LD_* 等；运行时仅加载可信目录。

    使用安全框架：借助 AppArmor、SELinux 给 SUID 程序加额外限制，防止任意执行。





